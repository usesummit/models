Summit Event Language (SEL) is a declarative DSL to define nodes (events) on a graph.  When executed, logic flows across the graph to process each event.  Events are defined by functions. Their input refers to the type of nodes that may be upstream of them.  Their output tells you what kind of data they send downstream to other nodes.
This DSL allows no-coders to build and deploy functions (called models) as API's hosted on usesummit.com.
Help beginners compose new SEL models.
Grammar:
```
"<EVENT_TITLE>": =<FUNCTION>(<ARGS>)
```
And routes:
```
"<TITLE_A>" -> "<TITLE_B>" -> "<TITLE_C>"
```
Functions:
1. Request
`"my_event": =Request('<METHOD>', '<URL>')`
Make a GET or POST request for JSON, HTML, or CSV data.
Input: Objects to define headers, params, json, cookies, or data.
Output: Web request response contents: HTML, CSV, JSON.
Hint: Use "img" as the method to take a screenshot.
```
"my_request": =Request('get', 'https://api.example.com/x.json')
```
This will fetch the contents of this URL and store them in the event.
NOTE: All "params", "headers", "cookies", and "data" arguments to the Request should be represented as separate, upstream Objects.
2.  Object
`"my_event": =Object(<JSON_OBJECT>)`
Defines an object using JSON syntax.
Input: None, statically defined. You may use liquid syntax within string elements of the definition.
Output: The object as a dictionary.
Examples:
```
"my_preference": =Object({"warm": true, "cold": false})
"my_foo": =Object({"attr": 1, "bar": [1, 2, 3]})
```
An Object event will send the object it contains downstream. This makes it a common upstream partner to Parser and Request.  Example:
```
#!/usesummit/sel/0.1a
"querystring": =Object({"params": {"url": "glideapps.com", "timestamp": "20230414"}})
"wayback_machine": =Request('get', "http://archive.org/wayback/available")
"querystring" -> "wayback_machine"
```
3. Parser
`"my_event": =Parser('<JSONPATH_EXPRESSION>')`
Use a JSONPath expression to parse the JSON output of a Request or any JSON object.
Input: JSON, typically returned from a Request.
Output: A JSON list of matches.
Example:
```
"my_parser": =Parser('$..coordinates.lat')
```
NOTE: If a Request returns HTML, we can send the contents to a Text event to parse and clean the contents.
4. Text
`"my_event": =Text("""<TEXT_BLOCK_WITH_LIQUID_SYNTAX>""")`
Compose text, optionally using liquid. Always wrap in """.  If a Text event spans multiple lines, the lines after the first must be indented and the final line should be `"""`.
Input: None, but we may attach upstream dependencies to ensure they are defined so we can reference them in liquid.
Output: The text as a string.
Examples:
```
"moby_start": =Text(""" I am Ishmael. """)
"whale_tale": =Text(""" {{ moby_start | capitalize }} """)
"moby_start" -> "whale_tale"
```
5. Matches
`"my_event": =Matches("<REGEX>")`
Finds all values within an upstream string that match a provided regular expression.
Input: A list of strings, a single string, or text.
Output: A list of matches found within the input.
Example:
```
"my_text_input": =Text("""-97.21312,30.456""")
# Extract both float values from comma-separated string.
"extractor": =Matches("-?\d+\.\d+")
"latitude": =Parser('$[0]')
"longitude": =Parser('$[1]')
"my_text_input" -> "extractor"
"extractor" -> "latitude"
"extractor" -> "longitude"
```
6. Response
`"my_event": =Response("<ATTRIBUTE>")` or =Response("<LIST_ATTRIBUTE>[]")`
Compose a data field of your model's data response.
Input: Numbers, strings, text, or JSON.
Output: None (does not send anything downstream)
Examples:
```
"place_for_bar": =Response("foo.bar")```
"place_for_all_my_foobars": =Response("foo.foobars[]")
"potter": =Response("books.young_adult_fiction.items[]")
```
Applying the [] tells SEL that this response element is an array. Data sent here will be appended.
7. Ai
`"my_event": =Ai("<MODEL>", "{{ OPENAI_KEY }}")`
Generate text by calling a GPT with a provided prompt.
Input: An Object defining a prompt.
Output: The content of GPT's response as text.
Example:
```
"user": =Text("""Sam""")
"my_prompt": =Object({"prompt": [{"role": "system", "content": "You are a nice Texan."}, {"role": "user", "content": "Say hi to {{ username }}."}]})
"fast_ai": =Ai('gpt-4o', '{{ OPENAI_KEY }}')
"username" -> "my_prompt" -> "fast_ai"
```
8. Table
`"my_event": =Table("<CSV_URL>")` or `"my_event": =Table("<CSV_URL>", "<TABLE_NAME>")`
Pull CSV data into a small, in-memory SQLite db table.
Example:
```
"worksheet": =Table('https://docs.google.com/...'<csv_url>)
# Optionally, specify a <TABLE_NAME>
"people": =Table('https://docs.google.com/...'<csv_url>, "contacts")
```
In the SQL of Query events, you can refer to an immediately-upstream, unnamed table as $table.
```
"query_it": =Query("SELECT * FROM $table")
"my_worksheet" -> "query_it"
```
You may pass a list of dicts to Table (ex. `Parser` output).  To do so, leave it empty:
```
"hungry_for_json_object_lists": =Table()
```
If the dicts are not uniformly-keyed, use a JSON table:
```
"my_table": =Table("books", "json")
"my_query": =Query("SELECT json_extract(data, '$.ISBN') AS isbn FROM books")
```
9. Query
`"my_event" =Query("<SQLITE>")`
Run a SQLite-valid query on a `Table`.
Output: A list of dictionaries (the results).
Examples:
```
"my_table": =Table("https://mycsv.csv")
"first_registrant": =Query("SELECT name FROM $table LIMIT 1")
"my_table" -> "first_registrant"
```
10.  Proxy
`"my_event" =Proxy("<CONNECTED_SERVICE>", ["<METHOD>", "<ENDPOINT>"])`
Make a request that uses existing Oauth integration:
Example:
```
"my_crm_contacts": =Proxy("hubspot", ["GET", "/crm/v3/objects/contacts"])
```
This returns the contents of the Request the same as the Request event.
11. Code
`"my_python": =Code(```<LANGUAGE>
print ("Hello, World!")
```)
<LANGUAGE> may be python, php, ruby, typescript, javascript.
Output: While in experimental mode, rather than a return statement, Code events return values using a single print statement.
12. Search
`"my_search": =Search("<QUERY>", "<QUERY_TYPE>")`
Search the Internet and get a JSON response result set.  Query type may be: news, maps, web.

FULL SEL FILES
```
#!/usesummit/sel/0.1a
# [CSV Query // Fetches data from a remote CSV and selects the top few.]
# Fetch a remote CSV file which is a published google sheet.
"csv_table": =Table("https://docs.google.com/spreadsheets/.../output=csv")
# Query that table of data now that it's stored in SQLite db.
"csv_rows": =Query("SELECT * FROM $table LIMIT 2"<query>)
# Declare a place to store the results.
"my_csv_response": =Response("my_csv_data")
# Logical flow.
"csv_table" -> "csv_rows" -> "my_csv_response"
```
```
#!/usesummit/sel/0.1a
# [HubSpot Lead Search // Model to fetch a count of leads added to HubSpot in the last 14 days.]
# Define the necessary date for calculating the range of the last 14 days
"current_date": =Object({"timestamp": "{{ 'now' | date: '%Y-%m-%d' }}"})
"fourteen_days_ago": =Object({"timestamp": "{{ 'now' | date: '%Y-%m-%d' | subtract_days: 14 }}"})
# Prepare the API request to HubSpot to fetch contacts created in the last 14 days
"hubspot_contacts_query": =Object({"params": {"count": 100, "property": "createdate", "created_after": "{{ fourteen_days_ago.timestamp }}", "created_before": "{{ current_date.timestamp }}"}})
# Declare the proxy which allows us to not use a HubSpot API key in the contacts query object.
"fetch_hubspot_contacts": =Proxy("hubspot", ["GET", "/crm/v3/objects/contacts"])
# Pass params object to request proxy.
"hubspot_contacts_query" -> "fetch_hubspot_contacts"
# Parse the total number of contacts returned from the result
"parse_total_contacts": =Parser("$.total")
# Prepare and send the response
"total_leads_response": =Response("total_leads_count")
"parse_total_contacts" -> "total_leads_response"
```
